#!/bin/sh
# Zero-touch password initialization script
# Runs inside Alpine container to generate passwords if needed

set -e

ENV_FILE="/workspace/.env"
ENV_TEMPLATE="/workspace/.env.template"
ENV_BACKUP="/workspace/.env.backup"

# Function to generate secure random string
generate_password() {
    length=${1:-32}
    openssl rand -base64 $length | tr -d '='
}

# Function to detect timezone
detect_timezone() {
    # Try multiple methods to detect timezone
    if [ -f /etc/timezone ]; then
        cat /etc/timezone | tr -d '\n'
    elif [ -f /etc/localtime ]; then
        # Try to find matching timezone file
        find /usr/share/zoneinfo -type f -exec cmp -s /etc/localtime {} \; -print | \
            head -n1 | sed 's|/usr/share/zoneinfo/||' || echo "UTC"
    else
        echo "UTC"
    fi
}

echo "🚀 SmokePing Stack - Zero-Touch Password Initialization"
echo "======================================================"

# Check if .env exists and has non-default values
if [ -f "$ENV_FILE" ]; then
    echo "📄 Found existing .env file, checking for defaults..."
    
    # Check if passwords are still defaults
    if grep -q "supersecrettoken" "$ENV_FILE" || \
       grep -q "your-secret-key-here" "$ENV_FILE" || \
       grep -q "DOCKER_INFLUXDB_INIT_PASSWORD" "$ENV_FILE" | grep -qv "=" || \
       grep -q "POSTGRES_PASSWORD" "$ENV_FILE" | grep -qv "=" ; then
        echo "⚠️  Default values detected, regenerating passwords..."
        # Backup existing file
        cp "$ENV_FILE" "$ENV_BACKUP.$(date +%s)"
        need_generation=true
    else
        echo "✅ Valid passwords found, skipping generation"
        exit 0
    fi
else
    echo "📝 No .env file found, creating new configuration..."
    need_generation=true
fi

if [ "$need_generation" = "true" ]; then
    # Generate passwords
    echo "🔐 Generating secure random passwords..."
    INFLUX_PASSWORD=$(generate_password 32)
    INFLUX_TOKEN=$(generate_password 32)
    SECRET_KEY=$(generate_password 48)
    POSTGRES_PASSWORD=$(generate_password 32)
    
    # Detect timezone
    echo "🌍 Detecting system timezone..."
    DETECTED_TZ=$(detect_timezone)
    echo "   Detected: $DETECTED_TZ"
    
    # Create new .env file
    cat > "$ENV_FILE" << EOF
# .env - Auto-generated by zero-touch deployment
# Generated: $(date)
# -------------------------------------------------------------------
# SmokePing + InfluxDB + Grafana stack
# -------------------------------------------------------------------

# InfluxDB connection
INFLUX_URL=http://influxdb:8086
INFLUX_TOKEN=${INFLUX_TOKEN}
INFLUX_ORG=smokingpi
INFLUX_BUCKET=latency

# InfluxDB admin credentials
DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUX_PASSWORD}

# PostgreSQL credentials
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

# SmokePing RRD directory inside its container
RRD_DIR=/var/lib/smokeping

# Timezone configuration (auto-detected: ${DETECTED_TZ})
TZ=${DETECTED_TZ}

# Web Admin Interface
SECRET_KEY=${SECRET_KEY}

# -------------------------------------------------------------------
# IMPORTANT: This file contains sensitive information.
# Do not commit to version control!
# Run ./show-passwords.sh to display all credentials
# -------------------------------------------------------------------
EOF

    # Set secure permissions
    chmod 600 "$ENV_FILE"
    
    echo "✅ Password generation complete!"
    echo ""
    echo "📋 Generated Credentials:"
    echo "   InfluxDB Password: ${INFLUX_PASSWORD:0:8}..."
    echo "   InfluxDB Token: ${INFLUX_TOKEN:0:8}..."
    echo "   PostgreSQL Password: ${POSTGRES_PASSWORD:0:8}..."
    echo "   Secret Key: ${SECRET_KEY:0:8}..."
    echo ""
    echo "💡 Run ./show-passwords.sh to see full credentials"
    echo ""
    
    # Also create a one-time display file for immediate viewing
    cat > "/workspace/.passwords-generated" << EOF
🎉 Zero-Touch Deployment Complete!
=================================

Generated on: $(date)
Timezone: ${DETECTED_TZ}

InfluxDB Admin Password: ${INFLUX_PASSWORD}
InfluxDB API Token: ${INFLUX_TOKEN}
Web Admin Secret Key: ${SECRET_KEY}

Save these credentials securely!
This file will be deleted after first viewing.
EOF
    
    chmod 600 "/workspace/.passwords-generated"
fi

echo "✅ Initialization complete!"